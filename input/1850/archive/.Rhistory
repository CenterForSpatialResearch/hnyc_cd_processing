theme(panel.background = element_rect(fill = "white",
colour = "black",
size = 0.5,
linetype = "solid"),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(size = .1,
color = "black",
linetype = "dashed")) +
scale_fill_manual(values = usecol(pal_unikn_pair, n = 3, alpha = 0.8)) +
labs(x = "Achievement Ratio ( % )",
y = "Flesch.Kincaid Score",
title = "Do more readable blurbs increase the Achievement Ratio of \nKickstarter Campaigns?",
caption = "Source: webrobots.io")
sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique()) %>%
select(document_id, tone, state) %>%
ggplot(aes(x = tone, fill = state)) +
geom_histogram(bins = 30) +
facet_grid(state ~ .) +
theme(panel.background = element_rect(fill = "white",
colour = "black",
size = 0.5,
linetype = "solid"),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(size = .1,
color = "black",
linetype = "dashed")) +
scale_fill_manual(values = usecol(pal_unikn_pair, n = 3, alpha = 0.8)) +
labs(x = "Tone of Blurb",
y = "Count",
title = "Tone of Kickstarter blurbs by state of Campaign",
caption = "Source: webrobots.io")
sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique()) %>%
select(document_id, tone, state) %>%
ggplot(aes(x = tone, fill = state)) +
geom_histogram(bins = 30) +
facet_grid(state ~ .) +
theme(panel.background = element_rect(fill = "white",
colour = "black",
size = 0.5,
linetype = "solid"),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(size = .1,
color = "black",
linetype = "dashed")) +
scale_fill_manual(values = usecol(pal_unikn_pair, n = 3, alpha = 0.8)) +
labs(x = "Tone of Blurb",
y = "Count",
title = "Tone of Kickstarter Campaign Blurbs by State",
caption = "Source: webrobots.io")
# Prepare dtm in a tidy format
tidy_dtm <- tidy(dtm)
meta_dtm <- as_data_frame(str_split_fixed(tidy_dtm$document, "_", n = 2))
colnames(meta_dtm) <- c("document_id", "state")
meta_dtm$state <- gsub(".content", "", meta_dtm$state)
tidy_dtm <- as_data_frame(cbind(tidy_dtm, meta_dtm))
tidy_dtm <- tidy_dtm[, 2:5]
# Sentiment Analysis
sentiment_dtm <- tidy_dtm %>%
inner_join(get_sentiments("bing"), by = c("term" = "word"))
sentiment_dtm$score <- ifelse(sentiment_dtm$sentiment == "positive", 1, -1)
sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique()) %>%
select(document_id, tone, state) %>%
ggplot(aes(x = tone, fill = state)) +
geom_histogram(bins = 30) +
facet_grid(state ~ .) +
theme(panel.background = element_rect(fill = "white",
colour = "black",
size = 0.5,
linetype = "solid"),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(size = .1,
color = "black",
linetype = "dashed")) +
scale_fill_manual(values = usecol(pal_unikn_pair, n = 3, alpha = 0.8)) +
labs(x = "Tone of Blurb",
y = "Count",
title = "Tone of Kickstarter Campaign Blurbs by State",
caption = "Source: webrobots.io")
# Comparison cloud
sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique()) %>%
select(document_id, tone, state)
sentiment_dtm
tidy_dtm
tidy_tdm
tidy_dtm
as.matrix(tidy_dtm)
comparison.cloud(as.matrix(tidy_dtm), max.words = 100)
as.matrix(tidy_dtm), max.words = 100
as.matrix(tidy_dtm),
as.matrix(tidy_dtm)
sentiment_dtm
tidy_dtm
# Comparison cloud
sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique())
# Comparison cloud
sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count))
# Comparison cloud
sentiment_dtm
# Comparison cloud
sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique()) %>%
select(document_id, tone, state)
# Comparison cloud
doc_sentiment <- sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique()) %>%
select(document_id, tone, state)
doc_sentiment$sentiment <- ifelse(doc_sentiment$tone > 0, "positive", "negative")
doc_sentiment
# Comparison cloud
doc_sentiment <- sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique()) %>%
select(document_id, tone, state)
doc_sentiment$sentiment <- ifelse(doc_sentiment$tone > 0, "positive", "negative")
doc_sentiment <- doc_sentiment[1, 4]
doc_sentiment
# Comparison cloud
doc_sentiment <- sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique()) %>%
select(document_id, tone, state)
doc_sentiment$sentiment <- ifelse(doc_sentiment$tone > 0, "positive", "negative")
doc_sentiment <- doc_sentiment[, c(1,4)]
doc_sentiment
tidy_dtm %>%
inner_join(doc_sentiment)
tidy_dtm %>%
inner_join(doc_sentiment) %>%
as.matrix()
tidy_dtm %>%
inner_join(doc_sentiment) %>%
as.matrix() %>%
comparison.cloud()
tidy_dtm
doc_sentiment
tidy_dtm %>%
inner_join(doc_sentiment) %>%
group_by(term) %>%
summarize(count = sum(count), sentiment = first(sentiment)) %>%
arrnage(count)
tidy_dtm %>%
inner_join(doc_sentiment) %>%
group_by(term) %>%
summarize(count = sum(count), sentiment = first(sentiment)) %>%
arrange(count)
tidy_dtm %>%
inner_join(doc_sentiment) %>%
group_by(term) %>%
summarize(count = sum(count), sentiment = first(sentiment)) %>%
arrange(desc(count))
# Load Necessary Libraries
library(pacman)
p_load(broom,
data.table,
dplyr,
ggplot2,
hunspell,
plotly,
quanteda,
RColorBrewer,
reshape2,
rgdal,
rgeos,
SnowballC,
stringr,
tidytext,
tidyr,
tm,
unikn,
viridis,
wordcloud)
# Comparison cloud
doc_sentiment <- sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique()) %>%
select(document_id, tone, state)
doc_sentiment$sentiment <- ifelse(doc_sentiment$tone > 0, "positive", "negative")
doc_sentiment <- doc_sentiment[, c(1,4)]
comp_cloud <- tidy_dtm %>%
inner_join(doc_sentiment) %>%
group_by(term) %>%
summarize(count = sum(count), sentiment = first(sentiment)) %>%
arrange(desc(count))
comp_cloud <- acast(comp_cloud, term ~ sentiment, value.var = 'count', fill = 0)
comparison.cloud(comp_cloud, colors = c('black', 'orange'))
?comparison.cloud
# Comparison cloud
doc_sentiment <- sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique()) %>%
select(document_id, tone, state)
doc_sentiment$sentiment <- ifelse(doc_sentiment$tone > 0, "positive", "negative")
doc_sentiment <- doc_sentiment[, c(1,4)]
comp_cloud <- tidy_dtm %>%
inner_join(doc_sentiment) %>%
group_by(term) %>%
summarize(count = sum(count), sentiment = first(sentiment)) %>%
arrange(desc(count))
comp_cloud <- acast(comp_cloud, term ~ sentiment, value.var = 'count', fill = 0)
comparison.cloud(comp_cloud, colors = c('black', 'orange'), max.words = 100)
# Comparison cloud
doc_sentiment <- sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique()) %>%
select(document_id, tone, state)
doc_sentiment$sentiment <- ifelse(doc_sentiment$tone > 0, "positive", "negative")
doc_sentiment <- doc_sentiment[, c(1,4)]
comp_cloud <- tidy_dtm %>%
inner_join(doc_sentiment) %>%
group_by(term) %>%
summarize(count = sum(count), sentiment = first(sentiment)) %>%
arrange(desc(count))
comp_cloud <- acast(comp_cloud, term ~ sentiment, value.var = 'count', fill = 0)
comparison.cloud(comp_cloud,
colors = c('black', 'orange'),
max.words = 100,
title.size = 3)
# Comparison cloud
doc_sentiment <- sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique()) %>%
select(document_id, tone, state)
doc_sentiment$sentiment <- ifelse(doc_sentiment$tone > 0, "positive", "negative")
doc_sentiment <- doc_sentiment[, c(1,4)]
comp_cloud <- tidy_dtm %>%
inner_join(doc_sentiment) %>%
group_by(term) %>%
summarize(count = sum(count), sentiment = first(sentiment)) %>%
arrange(desc(count))
comp_cloud <- acast(comp_cloud, term ~ sentiment, value.var = 'count', fill = 0)
comparison.cloud(comp_cloud,
colors = c('seeblau5', 'bordeaux2'),
max.words = 100,
title.size = 3)
# Comparison cloud
doc_sentiment <- sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique()) %>%
select(document_id, tone, state)
doc_sentiment$sentiment <- ifelse(doc_sentiment$tone > 0, "positive", "negative")
doc_sentiment <- doc_sentiment[, c(1,4)]
comp_cloud <- tidy_dtm %>%
inner_join(doc_sentiment) %>%
group_by(term) %>%
summarize(count = sum(count), sentiment = first(sentiment)) %>%
arrange(desc(count))
comp_cloud <- acast(comp_cloud, term ~ sentiment, value.var = 'count', fill = 0)
comparison.cloud(comp_cloud,
colors = c('black', 'orange'),
max.words = 100,
title.size = 3)
# Comparison cloud
doc_sentiment <- sentiment_dtm %>%
group_by(document_id) %>%
summarize(tone = sum(score) / sum(count)) %>%
merge(meta %>% unique()) %>%
select(document_id, tone, state)
doc_sentiment$sentiment <- ifelse(doc_sentiment$tone > 0, "positive", "negative")
doc_sentiment <- doc_sentiment[, c(1,4)]
comp_cloud <- tidy_dtm %>%
inner_join(doc_sentiment, by = "document_id") %>%
group_by(term) %>%
summarize(count = sum(count), sentiment = first(sentiment)) %>%
arrange(desc(count))
comp_cloud <- acast(comp_cloud, term ~ sentiment, value.var = 'count', fill = 0)
comparison.cloud(comp_cloud,
colors = c('black', 'orange'),
max.words = 100,
title.size = 3)
tidy_tdm
tidy_dtm
tidy_tdm
tidy_dtm
# Emotion Analysis
emotion_dtm <- tidy_dtm %>%
inner_join(get_sentiments("nrc"), by = c("term" = "word"))
# Load Necessary Libraries
library(pacman)
p_load(broom,
data.table,
dplyr,
ggplot2,
hunspell,
plotly,
quanteda,
RColorBrewer,
reshape2,
rgdal,
rgeos,
SnowballC,
stringr,
textdata,
tidytext,
tidyr,
tm,
unikn,
viridis,
wordcloud)
# Emotion Analysis
tidy_dtm %>%
inner_join(get_sentiments("nrc"), by = c("term" = "word"))
# NRC Word-Emotion Analysis
emotion_dtm <- tidy_dtm %>%
inner_join(get_sentiments("nrc"), by = c("term" = "word"))
emotion_dtm
emotion_dtm %>%
group_by(sentiment, state) %>%
summarize(count = n())
emotion_dtm %>%
group_by(sentiment, state) %>%
summarize(count = n()) %>%
ggplot(aes(x = sentiment, y = count)) +
geom_col()
emotion_dtm %>%
group_by(sentiment, state) %>%
summarize(count = n()) %>%
ggplot(aes(x = sentiment, y = count)) +
geom_col() +
facet_wrap(~ state)
emotion_dtm %>%
group_by(sentiment, state) %>%
summarize(count = n()) %>%
ggplot(aes(x = sentiment, y = count)) +
geom_col() +
facet_wrap(~ state) +
coord_flip()
emotion_dtm %>%
group_by(sentiment, state) %>%
summarize(count = n()) %>%
ggplot(aes(x = sentiment, y = count)) +
geom_col() +
facet_wrap(~ state) +
coord_flip() +
theme(panel.background = element_rect(fill = "white",
colour = "black",
size = 0.5,
linetype = "solid"),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(size = .1,
color = "black",
linetype = "dashed")) +
scale_fill_manual(values = usecol(pal_unikn_pair, n = 3, alpha = 0.8)) +
labs(x = "Tone of Blurb",
y = "Count",
title = "Tone of Kickstarter Campaign Blurbs by State",
caption = "Source: webrobots.io")
emotion_dtm %>%
group_by(sentiment, state) %>%
summarize(count = n()) %>%
ggplot(aes(x = sentiment, y = count)) +
geom_col(aes(fill = state)) +
facet_wrap(~ state) +
coord_flip() +
theme(panel.background = element_rect(fill = "white",
colour = "black",
size = 0.5,
linetype = "solid"),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(size = .1,
color = "black",
linetype = "dashed")) +
scale_fill_manual(values = usecol(pal_unikn_pair, n = 3, alpha = 0.8)) +
labs(x = "Tone of Blurb",
y = "Count",
title = "Tone of Kickstarter Campaign Blurbs by State",
caption = "Source: webrobots.io")
# NRC Word-Emotion Analysis
emotion_dtm <- tidy_dtm %>%
inner_join(get_sentiments("nrc"), by = c("term" = "word"))
emotion_dtm %>%
group_by(sentiment, state) %>%
summarize(count = n()) %>%
ggplot(aes(x = sentiment, y = count)) +
geom_col(aes(fill = state)) +
facet_wrap(~ state) +
coord_flip() +
theme(panel.background = element_rect(fill = "white",
colour = "black",
size = 0.5,
linetype = "solid"),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(size = .1,
color = "black",
linetype = "dashed")) +
scale_fill_manual(values = usecol(pal_unikn_pair, n = 3, alpha = 0.8)) +
labs(x = "NRC Word-Emotion",
y = "Count",
title = "NRC Word-Emotion of Kickstarter Campaign Blurbs by State",
caption = "Source: webrobots.io")
sample_text$doc_id <- gsub("\\_successful", "", sample_text$doc_id)
sample_text$doc_id <- gsub("\\_failed", "", sample_text$doc_id)
sample_text$doc_id <- gsub("\\_canceled", "", sample_text$doc_id)
mos <- merge(sample_text, data, by.x = 'doc_id', by.y = "id") %>%
mutate('achievement_ratio' = round(pledged / goal * 100, 2)) %>%
select(backers_count, pledged, achievement_ratio, state)
# Text readability
readability <- suppressWarnings(textstat_readability(corpus(complete_corpus), measure = c('Flesch', 'meanSentenceLength', 'meanWordSyllables', 'Flesch.Kincaid')))
readability <- cbind(readability, mos)
# Simplicity
readability %>%
filter(pledged > 0) %>%
filter(achievement_ratio < 500) %>%
ggplot(aes(x = achievement_ratio,
y = Flesch.Kincaid)) +
geom_point(aes(color = state)) +
geom_smooth(method = "lm", se = FALSE, color = "black") +
theme(panel.background = element_rect(fill = "white",
colour = "black",
size = 0.5,
linetype = "solid"),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(size = .1,
color = "black",
linetype = "dashed")) +
scale_color_manual(values = usecol(pal_unikn_pair, n = 3, alpha = 0.8)) +
labs(x = "Achievement Ratio ( % )",
y = "Flesch.Kincaid Score",
title = "Readability of blurbs to Achievement Ratio of Kickstarter Campaigns",
caption = "Source: webrobots.io")
install.packages("shinythemes")
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(data.table)
data <- fread('medi_translate.csv')
data <- fread('medi_translate.csv')
data <- fread('medi-translate/medi_translate.csv')
data
?saveRDS()
saveRDS(data, file = 'medi-translate.rds)
saveRDS(data, file = 'medi-translate.rds')
shiny::runApp('Documents/Medi-Translate/medi-translate')
View(data)
runApp('Documents/Medi-Translate/medi-translate')
runApp('Documents/Medi-Translate/medi-translate')
runApp('Documents/Medi-Translate/medi-translate')
?sidebarPanel
runApp('Documents/Medi-Translate/medi-translate')
?useShinyjs
runApp('Documents/Medi-Translate/medi-translate')
runApp('Documents/Medi-Translate/medi-translate')
runApp('Documents/Medi-Translate/medi-translate')
runApp('Documents/Medi-Translate/medi-translate')
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(data.table)
data <- fread('medi_translate.csv')
data <- fread('medi_translate.csv')
saveRDS(data, file = 'medi_translate.rds')
saveRDS(data, file = 'medi-translate.rds')
shiny::runApp('Documents/Medi-Translate')
runApp('Documents/Medi-Translate')
data <- fread('medi_translate.csv')
data <- fread('medi_translate.csv')
saveRDS(data, file = 'medi-translate.rds')
data
runApp('Documents/Medi-Translate')
runApp('Documents/Medi-Translate')
runApp('Documents/Medi-Translate')
runApp('Documents/Medi-Translate')
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(data.table)
# Import csv file
data <- fread('medi_translate.csv')
# Save as RDS format
saveRDS(data, file = 'medi-translate.rds')
shiny::runApp('Documents/Medi-Translate')
setwd("~/Documents/HNYC/hnyc_cd_processing/input/1850")
knitr::opts_chunk$set(echo = TRUE)
read.delim('data.txt')
data <- read.delim('data.txt')
data
data <- read.delim('data.txt', sep = ",")
data
data <- read.delim('data.txt', sep = ",")
data
data <- read.delim('data.txt', header = FALSE)
data
data <- read.delim('data.txt', header = FALSE)
data
length(data)
data
data <- read.delim('data.txt', header = FALSE)
data
